/**
 * @file books.cpp
 * A set of books build a Bible edition. For example, LXX or StatResGNT.
 * They contain several books like Genesis and Exodus, or Matthew and Mark (and others).
 */

///
/// Automatically add all traditional books to a Bible edition.
int addBooks();
///
/// Lookup a verse in a Bible edition, in a given book, a given passage.
string lookupVerse(string book, string info, string verse) {
 /// @param book The book, e.g. "Genesis".
 /// @param info The Bible edition, e.g. "LXX".
 /// @param verse The traditionally numbered verse, e.g. "1:1".
};
///
/// Get the fingerprint of a passage, given with starting position and length.
fingerprint getTextFingerprint(string book, string info, int start, int length);
///
/// Get the fingerprint of a passage, given with starting and ending verse by traditional numbering.
fingerprint getTextFingerprint(string book, string info, string start, string end);
///
/// Get the fingerprint of a passage, given with starting and ending verse by traditional numbering and shifts.
fingerprint getTextFingerprint(string book, string info, string start, string end, int startOffset, int endOffset);
/// Compare two passages via fingerprints and their distance.
/// It is computed with a formula \f$(d(p_1,p_2)+1)/(|p_1|+|p_2|)\f$ where the distance of the passages (plus 1)
/// is divided by the sum of the length of the passages.
int compare(string book1, string info1, string verseInfo1s, string verseInfo1e, int startOffset1, int endOffset1,
            string book2, string info2, string verseInfo2s, string verseInfo2e, int startOffset2, int endOffset2) {
 /// @param book1 The book of the first passage, e.g. "Genesis".
 /// @param info1 The Bible edition of the first passage, e.g. "LXX".
 /// @param verseInfo1s The first verse of the first passage by using traditional numbering, e.g. "1:1".
 /// @param verseInfo1e The last verse of the first passage by using traditional numbering, e.g. "1:2".
 /// @param startOffset1 The shift of the start of the first passage in characters.
 /// @param endOffset1 The shift of the end of the first passage in characters.
 /// @param book2 The book of the second passage, e.g. "Matthew".
 /// @param info2 The Bible edition of the second passage, e.g. "StatResGNT".
 /// @param verseInfo2s The first verse of the second passage by using traditional numbering, e.g. "4:10".
 /// @param verseInfo2e The last verse of the second passage by using traditional numbering, e.g. "4:12".
 /// @param startOffset2 The shift of the start of the second passage in characters.
 /// @param endOffset2 The shift of the end of the second passage in characters.
}
/// Compare two passages via fingerprints and their distance.
/// Inputs are given in Greek characters.
int compare(string verse1, string verse2);
/// Compare two passages via fingerprints and their distance.
/// Inputs are given in a-y encoding.
int compareLatin(string verse1, string verse2);
///
/// @deprecated Assume that two passages are in correlation, find their best fit.
int findBestFit(string book1, string info1, string verseInfo1s, string verseInfo1e,
                string book2, string info2, string verseInfo2s, string verseInfo2e);
///
/// Convert raw input verse to a-y encoding.
string processVerse(const string &verse);
///
/// Get text from a given Bible edition, book, passage, with given shifts.
string getText(string book, string info, string VerseInfoS, string VerseInfoE, int startOffset, int endOffset) {
 /// @param book The book of the passage, e.g. "Genesis".
 /// @param info The Bible edition of the passage, e.g. "LXX".
 /// @param verseInfoS The first verse of the passage by using traditional numbering, e.g. "1:1".
 /// @param verseInfoE The last verse of the passage by using traditional numbering, e.g. "1:2".
 /// @param startOffset The shift of the start of the passage in characters.
 /// @param endOffset The shift of the end of the passage in characters.
 /// @return The requested text.
};
///
/// Find a passage (verbatim) in a Bible edition.
int find(string text, string moduleName, int maxFound, int verb) {
 /// @param text The passage to be found in a-y encoding.
 /// @param moduleName The Bible edition to search, e.g. "LXX".
 /// @param maxFound The maximal amount of occurrences, then stop.
 /// @param verb Request verbose mode (1 if yes).
 /// @return if the process was successul.
};
///
/// Find a minimally unique subtext in the input text.
vector<string> find_min_unique(string text, string moduleName, int verb) {
 /// @param text The input text in a-y encoding.
 /// @param moduleName The Bible edition to search in, e.g. "LXX".
 /// @param verb Verbose mode (1 if yes).
};
/// Extend a passage that is unique in another edition to be maximally long, and keep verbatim equality.
/// See https://matek.hu/zoltan/blog-20220131.php for an explanation.
void extend(string moduleName1, string moduleName2, string book2, string verse2S,
            int start, string verse2E, int end) {
 /// @param moduleName1 First Bible edition, e.g. "LXX".
 /// @param moduleName2 Second Bible edition, different from the first one, e.g. "StatResGNT".
 /// @param book2 A book in the second Bible edition, e.g. "Luke".
 /// @param verse2S Starting verse in the second Bible edition, e.g. "4:10".
 /// @param start Shift in the start of passage in the second Bible edition, e.g. 15.
 /// @param verse2E Ending verse in the second Bible edition, e.g. "4:10".
 /// @param end Shift in the end of passage in the second Bible edition, e.g. 0.
};

/// Get all possible verbatim quotations of a Bible passage being present in another Bible.
/// See https://matek.hu/zoltan/blog-20220201.php for an explanation.
void getrefs(string moduleName2, string moduleName1, string book1, string verse1S,
             int start, string verse1E, int end) {
 /// @param moduleName2 Second Bible edition, e.g. "StatResGNT".
 /// @param moduleName1 First Bible edition, e.g. "LXX".
 /// @param book1 A book in the first Bible edition, e.g. "Psalms".
 /// @param verse1S Starting verse in the second Bible edition, e.g. "82:6".
 /// @param start Shift in the start of passage in the first Bible edition, e.g. 0.
 /// @param verse1E Ending verse in the first Bible edition, e.g. "82:6".
 /// @param end Shift in the end of passage in the first Bible edition, e.g. 0.
};
///
/// Lookup a passage in a given Bible edition.
int lookupTranslation(string moduleName, string book, string verse) {
 /// @param moduleName A Bible edition, e.g. "LXX".
 /// @param book A book in the first Bible edition, e.g. "Psalms".
 /// @param verse A verse in the second Bible edition, e.g. "82:6".
 /// @return if the lookup was successul.
};
/// Show the installed Bible editions, available via the Sword system.
/// See https://crosswire.org for more information.
void showAvailableBibles();
///
/// Give the number of verses in a Psalm.
int getPsalmLastVerse(string moduleName, int psalm) {
 /// @param moduleName A Bible edition, e.g. "LXX".
 /// @param psalm The Psalm number, e.g. 82.
 /// @return The number of verses.
};
/// Get the raw passage text in a-y encoding.
string getRaw(string modulename, string book, int startPos, int length) {
 /// @param moduleName A Bible edition, e.g. "LXX".
 /// @param book A book in the give Bible, e.g. "Psalms".
 /// @param startPos First position in the a-y encoded text, in characters.
 /// @param length Length of the a-y encoded text.
};
///
/// Convert Latin text to Greek.
string latinToGreek(string latin);
/// Get the tokens for a given passage.
int getTokens(string moduleName, string book, string verse) {
 /// @param moduleName A Bible edition, e.g. "LXX".
 /// @param book A book in the give Bible, e.g. "Psalms".
 /// @param verse A verse, given in traditional numbering, e.g. "82:6".
}
/// Search for a token set in a Bible edition.
/// See https://matek.hu/zoltan/blog-20230731.php for more information.
vector<string> searchTokenset(string moduleName, vector<int> pattern, int length, bool verbose) {
 /// @param moduleName A Bible edition, e.g. "LXX".
 /// @param pattern A set of tokens, insensitive for order.
 /// @param length Maximal length of passage to search, in tokens.
 /// @param verbose Request verbose mode.
 /// @return A vector of strings in format book,tpos (e.g. "Genesis,123") where an occurence is found in book from token position tpos.
}
